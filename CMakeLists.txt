cmake_minimum_required(VERSION 2.8)

project(RemoteWebcamCli)
project(RemoteWebcamMultiSrv)

find_package(OpenCV)
include_directories(${OpenCV_INCLUDE_DIRS})
option(USE_OPENCV_HIGHGUI_CPP_API "USE_OPENCV_HIGHGUI_CPP_API" ON)
if(USE_OPENCV_HIGHGUI_CPP_API)
	add_definitions(-D USE_OPENCV_HIGHGUI_CPP_API)
endif()

include_directories("${PROJECT_SOURCE_DIR}/../OSUtils")
include_directories("${PROJECT_SOURCE_DIR}/../Extensions/Img")

add_executable(RemoteWebcamCli RemoteWebcamCli/Main.c RemoteWebcamCli/Globals.c ../OSUtils/OSTime.c ../OSUtils/OSNet.c ../OSUtils/OSMisc.c ../OSUtils/OSCore.c)
add_executable(RemoteWebcamMultiSrv RemoteWebcamMultiSrv/Main.cpp RemoteWebcamMultiSrv/Globals.cpp ../OSUtils/OSTimer.c ../OSUtils/OSTime.c ../OSUtils/OSThread.c ../OSUtils/OSNet.c ../OSUtils/OSMisc.c ../OSUtils/OSEv.c ../OSUtils/OSCriticalSection.c ../OSUtils/OSCore.c)

if(OpenCV_VERSION VERSION_LESS "4")
else()
	if(MSVC)
	else()
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11") # CMAKE_CXX_STANDARD does not seem to work on Mac OS...
	endif()
endif()
target_link_libraries(RemoteWebcamCli ${OpenCV_LIBS})
target_link_libraries(RemoteWebcamMultiSrv ${OpenCV_LIBS})

if(WIN32)
	add_definitions(-D ENABLE_GETTIMEOFDAY_WIN32 -D DISABLE_TIMEZONE_STRUCT_REDEFINITION)
	if(MSVC)
		target_link_libraries(RemoteWebcamCli WinMM WS2_32)
		target_link_libraries(RemoteWebcamMultiSrv WinMM WS2_32)
	else()
		target_link_libraries(RemoteWebcamCli WinMM WS2_32 m)
		target_link_libraries(RemoteWebcamMultiSrv WinMM WS2_32 m)
	endif()
else()
	if(APPLE)
		target_link_libraries(RemoteWebcamCli pthread m)
		target_link_libraries(RemoteWebcamMultiSrv pthread m)
	else()
		target_link_libraries(RemoteWebcamCli pthread m)
		target_link_libraries(RemoteWebcamMultiSrv pthread m)
	endif()
endif()

set_target_properties(RemoteWebcamCli PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/RemoteWebcamCli")
set_target_properties(RemoteWebcamMultiSrv PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/RemoteWebcamMultiSrv")
